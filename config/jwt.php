<?php

return [

    /*
    |------------------------------------------------------------------------
    | JWT 身份验证秘密
    |------------------------------------------------------------------------
    |
    |不要忘记在 .env 文件中设置它，因为它将用于签名
    |你的代币。为此提供了一个辅助命令：
    | `php artisan jwt:秘密`
    |
    |注意：这仅用于对称算法（HMAC），
    |因为 RSA 和 ECDSA 使用私钥/公钥组合（见下文）。
    |
    */

    'secret' => env('JWT_SECRET'),

    /*
    |------------------------------------------------------------------------
    | JWT 身份验证密钥
    |------------------------------------------------------------------------
    |
    |您使用的算法将决定您的代币是否
    |使用随机字符串（在“JWT_SECRET”中定义）签名或使用
    |遵循公钥和私钥。
    |
    |对称算法：
    | HS256、HS384 和 HS512 将使用“JWT_SECRET”。
    |
    |非对称算法：
    | RS256、RS384 & RS512 /ES256、ES384 & ES512 将使用以下按键。
    |
    */

    'keys' => [

        /*
        |--------------------------------------------------------------------------
        | Public Key
        |--------------------------------------------------------------------------
        |
        | A path or resource to your public key.
        |
        | E.g. 'file://path/to/public/key'
        |
        */

        'public' => env('JWT_PUBLIC_KEY'),

        /*
        |--------------------------------------------------------------------------
        | Private Key
        |--------------------------------------------------------------------------
        |
        | A path or resource to your private key.
        |
        | E.g. 'file://path/to/private/key'
        |
        */

        'private' => env('JWT_PRIVATE_KEY'),

        /*
        |--------------------------------------------------------------------------
        | Passphrase
        |--------------------------------------------------------------------------
        |
        | The passphrase for your private key. Can be null if none set.
        |
        */

        'passphrase' => env('JWT_PASSPHRASE'),

    ],

    /*
    |------------------------------------------------------------------------
    |智威汤逊的生存时间
    |------------------------------------------------------------------------
    |
    |指定令牌的有效时间长度（以分钟为单位）。
    |默认为 1 小时。
    |
    |您还可以将其设置为 null，以生成永不过期的令牌。
    |有些人可能想要这种行为，例如一个移动应用程序。
    |不特别推荐这样做，因此请确保您有合适的
    |如有必要，系统可以撤销令牌。
    |注意：如果将其设置为 null，则应从“required_claims”列表中删除“exp”元素。
    |
    */

    'ttl' => env('JWT_TTL', 60),

    /*
    |------------------------------------------------------------------------
    |刷新生存时间
    |------------------------------------------------------------------------
    |
    |指定令牌可以刷新的时间长度（以分钟为单位）
    |之内。 IE。用户可以在 2 周内刷新其令牌
    |创建原始令牌，直到必须重新进行身份验证。
    |默认为 2 周。
    |
    |您还可以将其设置为 null，以产生无限的刷新时间。
    |有些人可能想要这个而不是永不过期的令牌，例如一个移动应用程序。
    |不特别推荐这样做，因此请确保您有合适的
    |如有必要，系统可以撤销令牌。
    |
    */

    'refresh_ttl' => env('JWT_REFRESH_TTL', 20160),

    /*
    |--------------------------------------------------------------------------
    | JWT 哈希算法
    |--------------------------------------------------------------------------
    |
    | 指定将用于签署令牌的哈希算法。
    |
    */

    'algo' => env('JWT_ALGO', Tymon\JWTAuth\Providers\JWT\Provider::ALGO_HS256),

    /*
    |--------------------------------------------------------------------------
    | Required Claims
    |--------------------------------------------------------------------------
    |
    |指定任何令牌中必须存在的必需声明。
    |如果这些声明中的任何一个不成立，则会抛出 TokenInvalidException
    |存在于有效负载中。
    |
    */

    'required_claims' => [
        'iss',
        'iat',
        'exp',
        'nbf',
        'sub',
        'jti',
    ],

    /*
    |--------------------------------------------------------------------------
    | Persistent Claims
    |--------------------------------------------------------------------------
    |
    |指定刷新令牌时要保留的声明密钥。
    | `sub` 和 `iat` 将自动被持久化，在
    |除了这些主张之外。
    |
    |注意：如果声明不存在，则该声明将被忽略。
    |
    */

    'persistent_claims' => [
        // 'foo',
        // 'bar',
    ],

    /*
    |--------------------------------------------------------------------------
    | Lock Subject
    |--------------------------------------------------------------------------
    |
    | 这将确定是否自动添加“prv”声明
    |令牌。这样做的目的是确保如果您有多个
    |身份验证模型，例如`App\User` & `App\OtherPerson`，然后我们
    |应防止一个身份验证请求冒充另一个身份验证请求，
    |如果 2 个令牌在 2 个不同的模型中碰巧具有相同的 id。
    |
    |在特定情况下，您可能需要禁用此行为
    |例如如果您只有一种身份验证模型，那么您将节省
    |关于令牌大小的一点。
    |
    */

    'lock_subject' => true,

    /*
    |------------------------------------------------------------------------
    |余地
    |------------------------------------------------------------------------
    |
    |此属性为 jwt 时间戳声明提供了一些“回旋余地”。
    |这意味着如果您有任何不可避免的轻微时钟偏差
    |那么这将为您的任何服务器提供一定程度的缓冲。
    |
    |这适用于声明“iat”、“nbf”和“exp”。
    |
    |以秒为单位指定 -仅当您知道需要时才指定。
    |
    */

    'leeway' => env('JWT_LEEWAY', 0),

    /*
    |--------------------------------------------------------------------------
    | Blacklist Enabled
    |--------------------------------------------------------------------------
    |
    |为了使令牌失效，您必须启用黑名单。
    |如果您不想或不需要此功能，请将其设置为 false。
    |
    */

    'blacklist_enabled' => env('JWT_BLACKLIST_ENABLED', true),

    /*
    | -------------------------------------------------------------------------
    | Blacklist Grace Period
    | -------------------------------------------------------------------------
    |
    | 当使用同一个 JWT 发出多个并发请求时，
    |由于令牌重新生成，其中一些可能会失败
    |根据每一个要求。
    |
    | 设置宽限期（以秒为单位）以防止并行请求失败。
    |
    */

    'blacklist_grace_period' => env('JWT_BLACKLIST_GRACE_PERIOD', 0),

    /*
    |--------------------------------------------------------------------------
    | Cookies encryption
    |--------------------------------------------------------------------------
    |
    | 默认情况下，出于安全原因，Laravel 会加密 cookie。
    |如果您决定不解密 cookie，则必须配置 Laravel
    |通过将其名称添加到 $ except 中来不加密您的 cookie 令牌
    | Laravel 提供的中间件“EncryptCookies”中提供了数组。
    |请参阅 https://laravel.com/docs/master/responses#cookies-and-encryption
    |了解详情。
    |
    |如果您想解密 cookie，请将其设置为 true。
    |
    */

    'decrypt_cookies' => false,

    /*
    |--------------------------------------------------------------------------
    | Providers
    |--------------------------------------------------------------------------
    |
    | 指定整个包中使用的各种提供程序。
    |
    */

    'providers' => [

        /*
        |--------------------------------------------------------------------------
        | JWT Provider
        |--------------------------------------------------------------------------
        |
        | 指定用于创建和解码令牌的提供程序。
        |
        */

        'jwt' => Tymon\JWTAuth\Providers\JWT\Lcobucci::class,

        /*
        |--------------------------------------------------------------------------
        | Authentication Provider
        |--------------------------------------------------------------------------
        |
        | 指定用于对用户进行身份验证的提供程序。
        |
        */

        'auth' => Tymon\JWTAuth\Providers\Auth\Illuminate::class,

        /*
        |--------------------------------------------------------------------------
        | Storage Provider
        |--------------------------------------------------------------------------
        |
        | 指定用于在黑名单中存储令牌的提供商。
        |
        */

        'storage' => Tymon\JWTAuth\Providers\Storage\Illuminate::class,

    ],

];
